When would you want to use a remote repository rather than keeping all your work
local?

    For collaborating with other developers, working on open-source and company projects, sharing the projects for others to use and modify, and showcasing personal projects.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    There maybe new but different changes (new feature, bug-fix, experimentation) in the remote repository that one doesn't want to merge with the local repository yet and vice-versa, or collaborators may be working on a new version of the project that's different from the updated remote repository and don't want the new changes from it.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are for working on other people's repos you don't have permission to directly modify, clones are for working locally on remote repos, and branches are for development or bug-fixes in repos.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Can know if there are new changes to the remote repo, what differences the local and remote repo have, and stay updated with the changes of the remote repo.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Would collaborate using Google docs, drive, Dropbox, and good old email. It would be easier if it's a document and we want to see live changes or if the files will be updated rarely. For software projects, might have zip the files and send them back and forth. It would be tedious and time-consuming if there will be frequent updates, different modifications and versions, and void of features that version control offers like branching, tagging, commit logs, diffs, blames, reverts, etc.


When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    During development of new features, bug-fixes, and general experimentation.
